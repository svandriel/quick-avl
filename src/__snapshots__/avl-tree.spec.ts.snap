// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AvlTree remove removes a leaf node 1`] = `
Object {
  "balanceFactor": 0,
  "key": 40,
  "left": Object {
    "balanceFactor": 0,
    "key": 10,
    "left": Object {
      "balanceFactor": 0,
      "key": 5,
      "value": 5,
    },
    "right": Object {
      "balanceFactor": 0,
      "key": 20,
      "value": 20,
    },
    "value": 10,
  },
  "right": Object {
    "balanceFactor": 0,
    "key": 60,
    "left": Object {
      "balanceFactor": 0,
      "key": 50,
      "value": 50,
    },
    "right": Object {
      "balanceFactor": 0,
      "key": 70,
      "value": 70,
    },
    "value": 60,
  },
  "value": 40,
}
`;

exports[`AvlTree remove removes a node that only has a left child 1`] = `
Object {
  "balanceFactor": 0,
  "key": 30,
  "left": Object {
    "balanceFactor": 0,
    "key": 20,
    "left": Object {
      "balanceFactor": 0,
      "key": 10,
      "value": 10,
    },
    "right": Object {
      "balanceFactor": 0,
      "key": 25,
      "value": 25,
    },
    "value": 20,
  },
  "right": Object {
    "balanceFactor": 1,
    "key": 40,
    "right": Object {
      "balanceFactor": 0,
      "key": 50,
      "value": 50,
    },
    "value": 40,
  },
  "value": 30,
}
`;

exports[`AvlTree remove removes a node that only has a right child 1`] = `
Object {
  "balanceFactor": 0,
  "key": 30,
  "left": Object {
    "balanceFactor": 0,
    "key": 20,
    "left": Object {
      "balanceFactor": 0,
      "key": 10,
      "value": 10,
    },
    "right": Object {
      "balanceFactor": 0,
      "key": 25,
      "value": 25,
    },
    "value": 20,
  },
  "right": Object {
    "balanceFactor": 1,
    "key": 40,
    "right": Object {
      "balanceFactor": 0,
      "key": 70,
      "value": 70,
    },
    "value": 40,
  },
  "value": 30,
}
`;

exports[`AvlTree remove removes a node with 2 children where its predecessor is its direct child 1`] = `
Object {
  "balanceFactor": 0,
  "key": 4,
  "left": Object {
    "balanceFactor": 0,
    "key": 1,
    "left": Object {
      "balanceFactor": 0,
      "key": 0,
      "value": 0,
    },
    "right": Object {
      "balanceFactor": 0,
      "key": 3,
      "value": 3,
    },
    "value": 1,
  },
  "right": Object {
    "balanceFactor": 0,
    "key": 6,
    "left": Object {
      "balanceFactor": 0,
      "key": 5,
      "value": 5,
    },
    "right": Object {
      "balanceFactor": 0,
      "key": 9,
      "value": 9,
    },
    "value": 6,
  },
  "value": 4,
}
`;

exports[`AvlTree remove removes a root node that only has a left child 1`] = `
Object {
  "balanceFactor": 0,
  "key": 0,
  "value": 0,
}
`;

exports[`AvlTree remove removes a root node when left-heavy and predecessor has left child 1`] = `
Object {
  "balanceFactor": 0,
  "key": 30,
  "left": Object {
    "balanceFactor": 0,
    "key": 20,
    "left": Object {
      "balanceFactor": 0,
      "key": 10,
      "value": 10,
    },
    "right": Object {
      "balanceFactor": 0,
      "key": 25,
      "value": 25,
    },
    "value": 20,
  },
  "right": Object {
    "balanceFactor": 0,
    "key": 60,
    "left": Object {
      "balanceFactor": 0,
      "key": 50,
      "value": 50,
    },
    "right": Object {
      "balanceFactor": 0,
      "key": 70,
      "value": 70,
    },
    "value": 60,
  },
  "value": 30,
}
`;

exports[`AvlTree remove removes a root node when left-heavy and predecessor has no left child 1`] = `
Object {
  "balanceFactor": 0,
  "key": 30,
  "left": Object {
    "balanceFactor": 0,
    "key": 15,
    "left": Object {
      "balanceFactor": 0,
      "key": 10,
      "value": 10,
    },
    "right": Object {
      "balanceFactor": 0,
      "key": 20,
      "value": 20,
    },
    "value": 15,
  },
  "right": Object {
    "balanceFactor": 0,
    "key": 60,
    "left": Object {
      "balanceFactor": 0,
      "key": 50,
      "value": 50,
    },
    "right": Object {
      "balanceFactor": 0,
      "key": 70,
      "value": 70,
    },
    "value": 60,
  },
  "value": 30,
}
`;

exports[`AvlTree remove removes a root node when right-heavy 1`] = `
Object {
  "balanceFactor": 0,
  "key": 50,
  "left": Object {
    "balanceFactor": 0,
    "key": 20,
    "left": Object {
      "balanceFactor": 0,
      "key": 10,
      "value": 10,
    },
    "right": Object {
      "balanceFactor": 0,
      "key": 30,
      "value": 30,
    },
    "value": 20,
  },
  "right": Object {
    "balanceFactor": 0,
    "key": 60,
    "left": Object {
      "balanceFactor": 0,
      "key": 55,
      "value": 55,
    },
    "right": Object {
      "balanceFactor": 0,
      "key": 70,
      "value": 70,
    },
    "value": 60,
  },
  "value": 50,
}
`;

exports[`AvlTree remove removes an intermediate node when left-heavy and predecessor has no right child 1`] = `
Object {
  "balanceFactor": 0,
  "key": 40,
  "left": Object {
    "balanceFactor": 0,
    "key": 20,
    "left": Object {
      "balanceFactor": 0,
      "key": 10,
      "value": 10,
    },
    "right": Object {
      "balanceFactor": 0,
      "key": 30,
      "value": 30,
    },
    "value": 20,
  },
  "right": Object {
    "balanceFactor": 0,
    "key": 55,
    "left": Object {
      "balanceFactor": 0,
      "key": 50,
      "value": 50,
    },
    "right": Object {
      "balanceFactor": 0,
      "key": 70,
      "value": 70,
    },
    "value": 55,
  },
  "value": 40,
}
`;

exports[`AvlTree remove removes an intermediate node when right-heavy and successor has no right child 1`] = `
Object {
  "balanceFactor": 0,
  "key": 40,
  "left": Object {
    "balanceFactor": 0,
    "key": 20,
    "left": Object {
      "balanceFactor": 0,
      "key": 10,
      "value": 10,
    },
    "right": Object {
      "balanceFactor": 0,
      "key": 30,
      "value": 30,
    },
    "value": 20,
  },
  "right": Object {
    "balanceFactor": 0,
    "key": 65,
    "left": Object {
      "balanceFactor": 0,
      "key": 50,
      "value": 50,
    },
    "right": Object {
      "balanceFactor": 0,
      "key": 70,
      "value": 70,
    },
    "value": 65,
  },
  "value": 40,
}
`;

exports[`AvlTree toJSON allows for JSON.stringify support 1`] = `"{\\"key\\":150,\\"value\\":150,\\"balanceFactor\\":0,\\"left\\":{\\"key\\":100,\\"value\\":100,\\"balanceFactor\\":0,\\"left\\":{\\"key\\":50,\\"value\\":50,\\"balanceFactor\\":0},\\"right\\":{\\"key\\":125,\\"value\\":125,\\"balanceFactor\\":0}},\\"right\\":{\\"key\\":200,\\"value\\":200,\\"balanceFactor\\":1,\\"right\\":{\\"key\\":300,\\"value\\":300,\\"balanceFactor\\":0}}}"`;

exports[`AvlTree toJSON allows for JSON.stringify support with empty trees 1`] = `undefined`;

exports[`AvlTree toJSON returns a simple object tree 1`] = `
Object {
  "balanceFactor": 0,
  "key": 150,
  "left": Object {
    "balanceFactor": 0,
    "key": 100,
    "left": Object {
      "balanceFactor": 0,
      "key": 50,
      "value": 50,
    },
    "right": Object {
      "balanceFactor": 0,
      "key": 125,
      "value": 125,
    },
    "value": 100,
  },
  "right": Object {
    "balanceFactor": 1,
    "key": 200,
    "right": Object {
      "balanceFactor": 0,
      "key": 300,
      "value": 300,
    },
    "value": 200,
  },
  "value": 150,
}
`;

exports[`AvlTree toString prints out a tree 1`] = `
"└── 100 [0]
    ├── 50 [-1]
    │   ├── 40 [0]
    └── 150 [0]
        ├── 125 [0]
        └── 200 [0]
"
`;

exports[`AvlTree toString prints out an empty tree 1`] = `""`;
